<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Formulário Técnico - Evento</title>
    <link rel="stylesheet" href="/css/styles.css">
    <style>
        /* Estilo Geral */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }

        .container {
            max-width: 900px;
            margin: 50px auto;
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
        }

        h1 {
            text-align: center;
            color: #333;
        }

/* Estilo das Abas como Pastas sobrepostas */
.tabs {
    display: flex;
    border-bottom: 2px solid #005CAA; /* Linha de separação */
    margin-bottom: 20px;
    position: relative; /* Permite camadas de sobreposição */
    z-index: 2;
}

.tabs button {
    position: relative;
    flex: 1;
    padding: 12px 15px;
    text-align: center;
    background: linear-gradient(145deg, #f4f4f4, #e6e6e6); /* Efeito de gradiente */
    color: #333;
    border: 1px solid #ccc;
    border-bottom: none; /* Remove a borda inferior para parecer conectado */
    border-radius: 8px 8px 0 0; /* Bordas arredondadas no topo */
    cursor: pointer;
    font-weight: bold;
    transition: all 0.3s ease;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Sombra para destacar as abas */
    z-index: 1; /* Aba inferior */
}

.tabs button:not(:last-child) {
    margin-right: -5px; /* Sobreposição leve */
}

.tabs button.active {
    background: #005CAA; /* Cor sólida para aba ativa */
    color: white;
    border: 1px solid #005CAA; /* Faz parecer que está conectada */
    z-index: 2; /* Eleva a aba ativa acima das outras */
    transform: translateY(-2px); /* Levanta a aba ativa levemente */
    box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15); /* Sombra mais intensa para aba ativa */
}

/* Conteúdo da Aba */
.tab-content {
    display: none;
    padding: 20px;
    background: white;
    border: 1px solid #ccc;
    border-radius: 0 8px 8px 8px; /* Bordas arredondadas apenas na parte inferior */
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Sombra para destaque */
}

.tab-content.active {
    display: block;
    z-index: 1;
}

/* Adicionando um fundo abaixo das abas */
.tabs::before {
    content: '';
    position: absolute;
    top: 100%;
    left: 0;
    width: 100%;
    height: 10px;
    background: linear-gradient(180deg, #e6e6e6, #ccc); /* Fundo para criar a ilusão de camadas */
    z-index: 0; /* Enviar para trás */
}

        label {
            font-weight: bold;
            display: block;
            margin: 10px 0 5px;
        }

        input, textarea, select {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        button.submit-btn {
            background: #005CAA;
            color: white;
            padding: 15px;
            width: 100%;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
        }

        button.submit-btn:hover {
            background: #003d80;
        }
    </style>
</head>
<body>
    <header class="header">
        <h2 class="header-title">Formulário Técnico - Evento</h2>
    </header>
    <div class="container">
        <h1>Preencha as Informações do Evento</h1>

        <!-- Abas -->
        <div class="tabs">
            <button class="tab-link active" data-tab="tab1">1. Identificação</button>
            <button class="tab-link" data-tab="tab2">2. Localizaçãoo</button>
            <button class="tab-link" data-tab="tab3">3. Objeto</button>
            <button class="tab-link" data-tab="tab4">4. Planejamento</button>
            <button class="tab-link" data-tab="tab5">5. Materiais</button>
            <button class="tab-link" data-tab="tab6">6. Divulgação</button>
        </div>

        <input type="text" id="proposalSearch" placeholder="Digite o número da proposta">
<button type="button" onclick="carregarEvento(document.getElementById('proposalSearch').value)">Carregar Evento</button>
        <!-- Conteúdo das Abas -->
        <form id="form-evento" action="/salvar-evento" method="POST">
            <!-- Aba 1: Identificação -->
            <div class="tab-content active" id="tab1">
                <form id="formTab1">
                    <!-- Identificação da Proponente -->
                    <fieldset>
                        <legend>1.1 Identificação da Proponente</legend>
                        <label for="cnpjProponente">CNPJ da Proponente:</label>
            <input type="text" id="cnpjProponente" name="cnpjProponente" onblur="buscarDadosCNPJ()" placeholder="Digite o CNPJ">
            
                        <label for="nomeProponente">Nome da Proponente:</label>
                        <input type="text" id="nomeProponente" name="nomeProponente" required>
            
                        <label for="nomeDirigente">Nome do Dirigente:</label>
                        <input type="text" id="nomeDirigente" name="nomeDirigente" required>
            
                        <label for="telefoneDirigente">Telefone de Contato (DDD):</label>
                        <input type="text" id="telefoneDirigente" name="telefoneDirigente" required>
            
                        <label for="emailDirigente">E-mail:</label>
                        <input type="email" id="emailDirigente" name="emailDirigente" required>
            
                        <label for="proposalNumber">Número da Proposta:</label>
                        <input type="text" id="proposalNumber" name="proposalNumber" required>
                    </fieldset>
            
                    <!-- Responsável pela Elaboração -->
                    <fieldset>
                        <legend>1.2 Responsável pela Elaboração (Opcional)</legend>
                        <label for="responsavelNome">Nome:</label>
                        <input type="text" id="responsavelNome" name="responsavelNome">
            
                        <label for="responsavelEmail">E-mail:</label>
                        <input type="email" id="responsavelEmail" name="responsavelEmail">
            
                        <label for="responsavelTelefone">Telefone de Contato (DDD):</label>
                        <input type="text" id="responsavelTelefone" name="responsavelTelefone">
                    </fieldset>
            
                    <!-- Dimensão do Projeto -->
                    <fieldset>
                        <legend>1.3 Dimensão do Projeto</legend>
                        <!-- Formação Esportiva -->
                        <label for="dimensaoFormacao">
                            <input type="radio" id="dimensaoFormacao" name="dimensaoEvento" value="formacao" required>
                            Formação Esportiva
                        </label>
                        <p class="dimensao-descricao">
                            Oferta oportunidades de acesso à prática esportiva em suas diversas manifestações por meio de ações planejadas, inclusivas e lúdicas para crianças e adolescentes. Este nível de atendimento comporta os serviços de vivência, fundamentação, aprendizagem esportiva e fomento e difusão do conhecimento científico, tecnológico e de inovação.
                        </p>
            
                        <!-- Esporte para toda vida -->
                        <label for="dimensaoEsporteVida">
                            <input type="radio" id="dimensaoEsporteVida" name="dimensaoEvento" value="esporte_vida" required>
                            Esporte para toda vida
                        </label>
                        <p class="dimensao-descricao">
                            Caracteriza-se pela vivência do esporte com autodeterminação a partir do conhecimento esportivo adquirido, pela transmissão pedagógica crítica e assumida dentre os hábitos culturais saudáveis ao longo da vida. Este nível abrange os serviços de esporte e lazer, atividade física, aprendizagem esportiva para crianças, jovens, adultos, idosos (esporte ao longo da vida), além do fomento e difusão do conhecimento científico, tecnológico e de inovação.
                        </p>
                    </fieldset>
            
                    <!-- Botão para salvar a aba -->
                    <button type="button" onclick="saveTab('formTab1')">Salvar Identificação</button>
                </form>
            </div>

<!-- Aba 2: Localização e Outras Informações -->
<div class="tab-content" id="tab2">
    <h3>2. Localização</h3>
    <form id="formTab2">
        <!-- Seleção de Município e Estado -->
        <label for="estado">Estado:</label>
        <select id="estado" name="estado" onchange="fetchMunicipios(this.value)" required>
            <option value="" disabled selected>Selecione um estado</option>
            <!-- Opções serão populadas dinamicamente -->
        </select>

        <label for="municipio">Município:</label>
        <select id="municipio" name="municipio" onchange="fetchDadosMunicipio(this.value)" required>
            <option value="" disabled selected>Selecione um município</option>
            <!-- Opções serão populadas dinamicamente -->
        </select>

        <!-- Campos de IDH -->
        <label for="idh">IDH:</label>
        <input type="text" id="idh" name="idh" required>

        <label for="idhFonte">Fonte:</label>
        <input type="text" id="idhFonte" name="idhFonte" required>

        <label for="idhAno">Ano de Referência:</label>
        <input type="number" id="idhAno" name="idhAno" required>

        <!-- Campos de População -->
        <label for="numeroHabitantes">Número de Habitantes:</label>
        <input type="number" id="numeroHabitantes" name="numeroHabitantes" required>

        <label for="habitantesFonte">Fonte:</label>
        <input type="text" id="habitantesFonte" name="habitantesFonte" required>

        <label for="habitantesAno">Ano de Referência:</label>
        <input type="number" id="habitantesAno" name="habitantesAno" required>

        <!-- Seção de Entidade -->
        <h3>1.6 Entidade</h3>
        <label>A Entidade já celebrou parceria com o Ministério?</label>
        <label for="parceriaSim">
            <input type="radio" id="parceriaSim" name="parceriaMinisterio" value="sim" required>
            Sim
        </label>
        <label for="parceriaNao">
            <input type="radio" id="parceriaNao" name="parceriaMinisterio" value="nao" required>
            Não
        </label>
        <label for="numeroParcerias">Número de Parcerias:</label>
        <input type="number" id="numeroParcerias" name="numeroParcerias">
        <label for="resultadosParcerias">Resultados das Parcerias:</label>
        <textarea id="resultadosParcerias" name="resultadosParcerias"></textarea>

        <!-- Seção de Entidades Parceiras -->
        <h3>1.7 Entidades Parceiras</h3>
        <label for="entidadeNome">Nome:</label>
        <input type="text" id="entidadeNome" name="entidadeNome" required>
        <label for="entidadeEmail">E-mail:</label>
        <input type="email" id="entidadeEmail" name="entidadeEmail" required>
        <label for="entidadeTelefone">Telefone:</label>
        <input type="text" id="entidadeTelefone" name="entidadeTelefone" required>
        <label for="entidadeEndereco">Endereço:</label>
        <input type="text" id="entidadeEndereco" name="entidadeEndereco" required>
        <label for="entidadeMunicipio">Município:</label>
        <input type="text" id="entidadeMunicipio" name="entidadeMunicipio" required>
        <label for="entidadeUF">UF:</label>
        <input type="text" id="entidadeUF" name="entidadeUF" required>
        <label for="entidadeCEP">CEP:</label>
        <input type="text" id="entidadeCEP" name="entidadeCEP" required>
        <label for="contribuicaoEntidade">Contribuição:</label>
        <textarea id="contribuicaoEntidade" name="contribuicaoEntidade"></textarea>

        <!-- Seção de Coordenador -->
        <h3>1.8 Coordenador</h3>
        <label for="coordenadorNome">Nome:</label>
        <input type="text" id="coordenadorNome" name="coordenadorNome" required>
        <label for="coordenadorEmail">E-mail:</label>
        <input type="email" id="coordenadorEmail" name="coordenadorEmail" required>
        <label for="coordenadorTelefone">Telefone:</label>
        <input type="text" id="coordenadorTelefone" name="coordenadorTelefone" required>

        <!-- Seção de Capacidade Técnica -->
        <h3>1.9 Capacidade Técnica</h3>
        <label>Capacidade Técnica:</label>
        <label for="capacidadeSim">
            <input type="radio" id="capacidadeSim" name="capacidadeTecnica" value="sim" required>
            Sim
        </label>
        <label for="capacidadeNao">
            <input type="radio" id="capacidadeNao" name="capacidadeTecnica" value="nao" required>
            Não
        </label>
        <label for="historicoCapacidade">Histórico:</label>
        <textarea id="historicoCapacidade" name="historicoCapacidade"></textarea>

        <button type="button" onclick="saveTab('formTab2')">Salvar</button>
    </form>
</div>

            <!-- Aba 3: Objeto -->
            <div class="tab-content" id="tab3">
                <label for="objeto">Objeto:</label>
                <textarea id="objeto" name="objeto" rows="4" required></textarea>

                <label for="justificativa">Justificativa:</label>
                <textarea id="justificativa" name="justificativa" rows="4" required></textarea>
            </div>

            <!-- Aba 4: Planejamento -->
            <div class="tab-content" id="tab4">
                <label for="metodologia">Metodologia:</label>
                <textarea id="metodologia" name="metodologia" rows="4" required></textarea>
            </div>

            <!-- Aba 5: Materiais -->
            <div class="tab-content" id="tab5">
                <label for="materiais">Lista de Materiais:</label>
                <textarea id="materiais" name="materiais" rows="4" required></textarea>
            </div>

            <!-- Aba 6: Divulgação -->
            <div class="tab-content" id="tab6">
                <label for="divulgacao">Plano de Divulgação:</label>
                <textarea id="divulgacao" name="divulgacao" rows="4" required></textarea>
            </div>

            <!-- Botão de Envio -->
<!-- Botão de Envio -->
            <button type="button" class="submit-btn" onclick="salvarEvento()">Salvar Evento</button>
            <button type="button" class="submit-btn" onclick="gerarPDF()">Gerar PDF</button>

        </form>
    </div>


    <script>
    document.addEventListener('DOMContentLoaded', () => {
        const button = document.querySelector('button');
        button.addEventListener('click', () => {
            const proposalNumber = document.getElementById('proposalSearch')?.value;
            if (proposalNumber) {
                carregarEvento(proposalNumber);
            } else {
                alert('Por favor, insira um número da proposta.');
            }
        });
    });
    //Validar CNPJ
    function validarCNPJ(cnpj) {
    cnpj = cnpj.replace(/\D/g, ''); // Remove caracteres não numéricos
    if (cnpj.length !== 14) return false;

    // Validação matemática básica
    let tamanho = cnpj.length - 2;
    let numeros = cnpj.substring(0, tamanho);
    let digitos = cnpj.substring(tamanho);
    let soma = 0;
    let pos = tamanho - 7;

    for (let i = tamanho; i >= 1; i--) {
        soma += numeros.charAt(tamanho - i) * pos--;
        if (pos < 2) pos = 9;
    }

    let resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
    if (resultado != digitos.charAt(0)) return false;

    tamanho = tamanho + 1;
    numeros = cnpj.substring(0, tamanho);
    soma = 0;
    pos = tamanho - 7;

    for (let i = tamanho; i >= 1; i--) {
        soma += numeros.charAt(tamanho - i) * pos--;
        if (pos < 2) pos = 9;
    }

    resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
    return resultado == digitos.charAt(1);
}
    //Consultar CNPJ
    async function buscarDadosCNPJ() {
    const cnpjInput = document.getElementById('cnpjProponente').value.replace(/\D/g, ''); // Remove pontuações

    if (!cnpjInput || cnpjInput.length !== 14) {
        alert('Por favor, insira um CNPJ válido.');
        return;
    }

    try {
        const response = await fetch(`/consultar-cnpj/${cnpjInput}`);
        if (!response.ok) throw new Error('CNPJ não encontrado');

        const dados = await response.json();

        // Preenchendo os campos com os dados retornados pela API
        document.getElementById('nomeProponente').value = dados.nome || 'Nome não disponível';
        document.getElementById('telefoneDirigente').value = dados.telefone || 'Telefone não disponível';
        document.getElementById('emailDirigente').value = dados.email || 'E-mail não disponível';

        // Preenchendo o nome do dirigente a partir do quadro societário
        const dirigente = dados.qsa?.find(pessoa => pessoa.qual.includes('Presidente') || pessoa.qual.includes('Responsável'));
        document.getElementById('nomeDirigente').value = dirigente?.nome || 'Dirigente não disponível';

        alert('Informações preenchidas com sucesso!');
    } catch (error) {
        console.error('Erro ao buscar CNPJ:', error);
        alert('Não foi possível encontrar informações para este CNPJ.');
    }
}
    // Politica de Privacidade 
    function showInfo(type) {
    const modal = document.getElementById('infoModal');
    const modalText = document.getElementById('modal-text');

    if (type === 'privacidade') {
        modalText.innerHTML = `
            <h2>Política de Privacidade</h2>
            <p>Esta política descreve como seus dados são coletados, usados e protegidos de acordo com a Lei Geral de Proteção de Dados (LGPD - Lei nº 13.709/2018).</p>
            <ul>
                <li>Seus dados serão usados apenas para os fins informados e consentidos.</li>
                <li>Você tem o direito de acessar, corrigir ou excluir suas informações pessoais.</li>
                <li>Os dados coletados estão protegidos por medidas de segurança avançadas.</li>
            </ul>
        `;
    } else if (type === 'termos') {
        modalText.innerHTML = `
            <h2>Termos de Uso</h2>
            <p>Os termos de uso regulam o acesso e a utilização deste sistema, conforme as leis vigentes:</p>
            <ul>
                <li>O uso deste sistema implica a aceitação dos termos descritos aqui.</li>
                <li>Você é responsável por manter a confidencialidade de suas credenciais de acesso.</li>
                <li>É proibido o uso do sistema para fins ilegais ou não autorizados.</li>
            </ul>
        `;
    }

    modal.classList.remove('hidden');
    modal.style.display = 'block';
}

async function salvarEvento() {
    const form = document.getElementById('form-evento');
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());

    try {
        const response = await fetch('/salvar-evento', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data),
        });

        if (response.ok) {
            alert('Evento salvo com sucesso!');
        } else {
            const errorText = await response.text();
            alert(`Erro ao salvar o evento: ${errorText}`);
        }
    } catch (error) {
        console.error('Erro ao salvar o evento:', error);
        alert('Erro ao salvar o evento.');
    }
}
function saveTab(formId) {
    const form = document.getElementById(formId);
    if (!form) {
        console.error(`Formulário com ID ${formId} não encontrado.`);
        return;
    }
    const data = new FormData(form);
    console.log("Dados salvos:", Object.fromEntries(data.entries()));
    alert("Dados salvos!");
}

function carregarEvento(proposalNumber) {
    if (!proposalNumber) {
        alert('Número da proposta é obrigatório.');
        return;
    }

    fetch(`/carregar-evento/${proposalNumber}`)
        .then(response => {
            if (!response.ok) throw new Error('Evento não encontrado.');
            return response.json();
        })
        .then(data => {
            Object.entries(data).forEach(([key, value]) => {
                const input = document.getElementById(key);
                if (input) input.value = value;
            });
            alert('Evento carregado com sucesso!');
        })
        .catch(error => {
            console.error('Erro ao carregar evento:', error);
            alert('Erro ao carregar o evento.');
        });
}

async function gerarPDF() {
    const form = document.getElementById('form-evento');
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());

    if (!data.proposalNumber) {
        alert('Número da Proposta é obrigatório.');
        return;
    }

    try {
        const response = await fetch('http://localhost:3001/gerar-pdf', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data),
        });

        if (response.ok) {
            const blob = await response.blob();
            const url = URL.createObjectURL(blob);

            // Criar link para download
            const a = document.createElement('a');
            a.href = url;
            a.download = `PTP_${data.proposalNumber}.pdf`;
            a.click();
            URL.revokeObjectURL(url);
        } else {
            const errorText = await response.text();
            alert(`Erro ao gerar o PDF: ${errorText}`);
        }
    } catch (error) {
        console.error('Erro ao gerar o PDF:', error);
        alert('Erro ao gerar o PDF. Verifique sua conexão ou o servidor.');
    }
}
// Alternar abas
const tabLinks = document.querySelectorAll('.tab-link');
    const tabContents = document.querySelectorAll('.tab-content');

    tabLinks.forEach(link => {
        link.addEventListener('click', () => {
            // Remover classes "active" de todas as abas e conteúdos
            tabLinks.forEach(tab => tab.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));

            // Adicionar "active" à aba clicada e ao conteúdo correspondente
            link.classList.add('active');
            const tabId = link.getAttribute('data-tab');
            document.getElementById(tabId).classList.add('active');
        });
    });
    // Função para carregar estados ao carregar a página
    document.addEventListener("DOMContentLoaded", () => {
        fetch("https://servicodados.ibge.gov.br/api/v1/localidades/estados") // API para buscar estados
            .then(response => response.json())
            .then(data => {
                const estadoSelect = document.getElementById('estado');
                data.forEach(estado => {
                    const option = document.createElement('option');
                    option.value = estado.id; // Código do estado
                    option.textContent = estado.nome; // Nome do estado
                    estadoSelect.appendChild(option);
                });
            })
            .catch(error => console.error('Erro ao buscar estados:', error));
    });

    // Função para buscar municípios com base no estado selecionado
    function fetchMunicipios(estadoId) {
        fetch(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${estadoId}/municipios`) // API para municípios
            .then(response => response.json())
            .then(data => {
                const municipioSelect = document.getElementById('municipio');
                municipioSelect.innerHTML = '<option value="" disabled selected>Selecione um município</option>';
                data.forEach(municipio => {
                    const option = document.createElement('option');
                    option.value = municipio.id; // Código do município
                    option.textContent = municipio.nome; // Nome do município
                    municipioSelect.appendChild(option);
                });
            })
            .catch(error => console.error('Erro ao buscar municípios:', error));
    }
    fetch("https://servicodados.ibge.gov.br/api/v1/localidades/estados")
    .then(response => response.json())
    .then(data => {
        console.log("Estados carregados:", data); // Log para verificar
        // Resto do código...
    })
    .catch(error => console.error('Erro ao buscar estados:', error));
            function fetchDadosMunicipio(municipioCodigo) {
            console.log("Código do município enviado:", municipioCodigo); // Verificar valor do município

            fetch(`https://api.dadosmunicipais.gov.br/municipios/${municipioCodigo}`) // Verifique se o endpoint está correto
                .then(response => {
                    console.log("Status da resposta:", response.status); // Verificar status da resposta
                    if (!response.ok) {
                        throw new Error(`Erro na API: ${response.status} - ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Dados retornados do município:", data); // Verificar dados no console

                    // Preenchendo os campos com os dados
                    document.getElementById('idh').value = data.idh || "Não disponível";
                    document.getElementById('idhFonte').value = data.fonteIDH || "Não disponível";
                    document.getElementById('idhAno').value = data.anoIDH || "";

                    document.getElementById('numeroHabitantes').value = data.populacao || "";
                    document.getElementById('habitantesFonte').value = data.fontePopulacao || "Não disponível";
                    document.getElementById('habitantesAno').value = data.anoPopulacao || "";
                })
                .catch(error => {
                    console.error('Erro ao buscar dados do município:', error);
                    alert("Erro ao buscar dados do município. Verifique sua conexão ou tente novamente.");
                });
        }
        function fetchDadosMunicipio(municipioCodigo) {
    fetch(`https://servicodados.ibge.gov.br/api/v1/localidades/municipios/${municipioCodigo}`)
        .then(response => {
            if (!response.ok) {
                throw new Error("Erro ao buscar dados do município");
            }
            return response.json();
        })
        .then(data => {
            console.log("Dados retornados do município:", data);

            // Atualize os campos conforme necessário
            document.getElementById('idh').value = data.idh || "Não disponível";
            document.getElementById('idhFonte').value = data.fonte || "Não disponível";
            document.getElementById('idhAno').value = data.anoReferencia || "Não disponível";
            document.getElementById('numeroHabitantes').value = data.populacao || "Não disponível";
            document.getElementById('habitantesFonte').value = data.fontePopulacao || "Não disponível";
            document.getElementById('habitantesAno').value = data.anoPopulacao || "Não disponível";
        })
        .catch(error => {
            console.error('Erro ao buscar dados do município:', error);
            alert("Erro ao buscar dados do município. Verifique sua conexão ou tente novamente.");
        });
}
    </script>
</body>
<footer class="footer">
    <p>&copy; 2024 Ministério do Esporte. Todos os direitos reservados.</p>
    <p>
        <a href="#" class="footer-link" onclick="showInfo('privacidade')">Política de Privacidade</a> |
            <a href="#" class="footer-link" onclick="showInfo('termos')">Termos de Uso</a>
    </p>
</footer>
</html>
